{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","API.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","cardsArray","map","user","index","key","SearchBox","searchChange","type","size","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchField","target","value","fetch","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qPAceA,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACrB,OACI,yBAAKC,UAAU,sDACX,yBAAKC,IAAI,SAASC,IAAG,gCAA2BL,EAA3B,cACrB,6BACI,4BAAKC,GACL,2BAAIC,MCYLI,EAjBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACVC,EAAaD,EAAOE,KAAI,SAACC,EAAMC,GACjC,OAAQ,kBAAC,EAAD,CACJC,IAAKL,EAAOI,GAAOX,GACnBA,GAAIO,EAAOI,GAAOX,GAClBC,KAAMM,EAAOI,GAAOV,KACpBC,MAAOK,EAAOI,GAAOT,WAG7B,OACI,6BACKM,ICEEK,EAZG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKX,UAAU,OACX,2BAAOA,UAAU,kCACjBY,KAAK,SACLC,KAAK,KACLC,YAAY,+BACZC,SAAUJ,MCDPK,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEJ,EAAMK,WCiBJC,E,YAnBX,WAAYN,GAAQ,IAAD,8BAChB,4CAAMA,KACAO,MAAQ,CACTC,UAAU,GAHC,E,+EAODC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAIG,KAAKJ,MAAMC,SACJ,6DAEJG,KAAKX,MAAMK,a,GAhBEQ,aCwDbC,G,kBAjDX,aAAe,IAAD,8BACV,+CAmBJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAnB1C,EAAKZ,MAAQ,CACTpB,OAAQ,GACR8B,YAAa,IAJP,E,qLASaG,MCjBf,+C,cDiBFC,E,0BACcA,EAASC,Q,OAAvBC,E,OACNZ,KAAKC,SAAS,CAAEzB,OAAQoC,I,gFAclB,IAAD,EAC2BZ,KAAKJ,MAA7BpB,EADH,EACGA,OAAQ8B,EADX,EACWA,YACVO,EAAiBrC,EAAOsC,QAAO,SAAAC,GACjC,OAAOA,EAAM7C,KAAK8C,cAAcC,SAASX,EAAYU,kBAEzD,OAAQxC,EAAO0C,OAIP,yBAAK9C,UAAU,MACX,wBAAIA,UAAU,MAAd,YACA,kBAAC,EAAD,CAAWW,aAAciB,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU5B,OAAQqC,OARlC,wBAAIzC,UAAU,WAAd,kB,GAhCM8B,cEIEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.542f3027.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({id, name, email}) => {\r\n    return (\r\n        <div className=\"tc bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img alt='robots' src={`https://robohash.org/t${id}?200x200`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    const cardsArray = robots.map((user, index) => {\r\n        return (<Card\r\n            key={robots[index].id}\r\n            id={robots[index].id}\r\n            name={robots[index].name}\r\n            email={robots[index].email} />\r\n        );\r\n    });\r\n    return (\r\n        <div>\r\n            {cardsArray}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n// every time the on change event is triggered, call the onchange function\r\n// searchChange is the prop that is passed\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input className=\"pa3 ba b--blue bg-lightest-blue\"\r\n            type=\"search\" \r\n            size=\"35\" \r\n            placeholder=\"Search your robot friends...\" \r\n            onChange={searchChange}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n       super(props);\r\n        this.state = {\r\n            hasError: false\r\n        };\r\n    };\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError: true});\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError){\r\n            return <h1>Oooops. Something went wrong!</h1>\r\n        }\r\n        return this.props.children;\r\n    };\r\n};\r\n\r\nexport default ErrorBoundary;\r\n\r\n","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\nimport api_url from '../API';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchField: ''\r\n        };\r\n    };\r\n\r\n    async componentDidMount() {\r\n        const response = await fetch(api_url);\r\n        const users = await response.json();\r\n        this.setState({ robots: users });\r\n    };\r\n\r\n    // use arrow functions for selfmade functions\r\n    //constructor and render come with react and can use the older syntax\r\n    // if using the same syntax, the this. will call the input field, not the App\r\n    // hence not allowing us to access this.state\r\n\r\n    // in order to update state, we always use this.setState\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchField: event.target.value });\r\n    };\r\n\r\n    // Renders the app component; inside we have props for SearchBox and CardList; searchChange is a prop for SearchBox\r\n    render() {\r\n        const { robots, searchField } = this.state;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        });\r\n        return !robots.length ?\r\n            <h2 className='loading'>Loading...</h2>\r\n            :\r\n            (\r\n                <div className='tc'>\r\n                    <h1 className='f1'>RoboBook</h1>\r\n                    <SearchBox searchChange={this.onSearchChange} />\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robots={filteredRobots} />\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n\r\n    };\r\n};\r\n\r\n\r\nexport default App;","// API that generates fake users\r\nconst api_url = 'https://jsonplaceholder.typicode.com/users';\r\n\r\nexport default api_url;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}